max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
}
c(C0, C1, C2, C3, C4, C5)
C0 = 1
C1 = 1
C2 = 1
C3 = 1
C4 = 1
C5 = 1
for (i in 1:5) {
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
}
c(C0, C1, C2, C3, C4, C5)
C0 = 1
C1 = 1
C2 = 1
C3 = 1
C4 = 1
C5 = 1
for (i in 1:3) {
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
}
c(C0, C1, C2, C3, C4, C5)
.Machine$double.eps
.Machine$double.eps=2.220446e-30
.Machine$double.eps
C0 = 1
C1 = 1
C2 = 1
C3 = 1
C4 = 1
C5 = 1
for (i in 1:3) {
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
}
c(C0, C1, C2, C3, C4, C5)
typeof(1)
typeof(1L)
C0 = 1
C1 = 1
C2 = 1
C3 = 1
C4 = 1
C5 = 1
for (i in 1:2) {
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
}
c(C0, C1, C2, C3, C4, C5)
sum(c(C0, C1, C2, C3, C4, C5))
typeof(C0)
round(C0,8)
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
c(C0, C1, C2, C3, C4, C5)
C0 = 1
C1 = 1
C2 = 1
C3 = 1
C4 = 1
C5 = 1
for (i in 1:2) {
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
}
c(C0, C1, C2, C3, C4, C5)
C0=round(C0,6);C1=round(C1,6);C2=round(C2,6);C3=round(C3,6);C4=round(C4,6);C5=round(C5,6)
c(C0, C1, C2, C3, C4, C5)
max_likelihood = nlminb(start = C5, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C4 = C4, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C5 = max_likelihood$par
max_likelihood = nlminb(start = C4, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C2 = C2,
C3 = C3, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C4 = max_likelihood$par
max_likelihood = nlminb(start = C0, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C1 = C1, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C0 = max_likelihood$par
max_likelihood = nlminb(start = C1, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C2 = C2, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C1 = max_likelihood$par
max_likelihood = nlminb(start = C2, objective = minus_loglikelihood_function,
lower = 0, upper = Inf, C0 = C0, C1 = C1, C3 = C3,
C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C2 = max_likelihood$par
max_likelihood = nlminb(start = C3, objective = minus_loglikelihood_function,
lower = -Inf, upper = Inf, C0 = C0, C1 = C1,
C2 = C2, C4 = C4, C5 = C5, nsubject=nsubject, grid=grid, WaveletCoefficientMatrix=WaveletCoefficientMatrix)
C3 = max_likelihood$par
c(C0, C1, C2, C3, C4, C5)
diag(2)
diag(2)[1,]
diag(2)[1,,drop=F]
library(BHMSMAfMRI)
set.seed(1)
nsubject <- 3
grid <- 8
ntime <- 4
Data <- array(rnorm(3*8*8*4),dim=c(3,8,8,4))
DesignMatrix <- cbind(c(1,0,1,0), c(1,1,1,1))
analysis <- "multi"
BHMSMA.multi <- BHMSMA(nsubject, grid, Data, DesignMatrix, TrueCoeff=NULL, analysis)
sum(BHMSMAmulti$GLMCoeffStandardized)
sum(BHMSMA.multi$GLMCoeffStandardized)
BHMSMA.multi$hyperparam
sum(BHMSMA.multi$WaveletCoefficientMatrix)
sum(BHMSMA.multi$GLMcoeffposterior)
dim(BHMSMA.multi$GLMcoeffposterior)
sum(BHMSMA.multi$GLMcoeffposterior)
remove.packages("BHMSMAfMRI1")
?CGEN::CGEN
library(BHMSMAfMRI)
set.seed(1)
n <- 3
grid <- 8
ntime <- 4
data <- array(rnorm(n*grid*grid*ntime),
dim=c(n,grid,grid,ntime))
designmat <- cbind(c(1,1,1,1),c(1,0,1,0))
k <- 2
analysis <- "multi"
BHMSMAmulti <- BHMSMA(n, grid, data, designmat,
k, analysis)
if(!is.matrix(designmat)) stop("designmat must be a matrix")
if(n!=nrow(data)) stop(cat("data doesn't have n=",n," rows.\n"))
if(ncol(designmat)==1) cat("Warning: designmat has only one column. The function doesn't add any intercept column by itself.")
if(k > ncol(designmat)) stop("Fix the input k.")
glmmap = glmcoef(n, grid, data, designmat)
wavecoefglmmap = waveletcoef(n, grid, glmmap$GLMCoefStandardized[,,,k], wave.family, filter.number, bc)
wavecoefglmmap = waveletcoef(n, grid, glmmap$GLMCoefStandardized[,,,k])
hyperest = hyperparamest( n, grid, wavecoefglmmap$WaveletCoefficientMatrix, analysis )
dim(wavecoefglmmap$WaveletCoefficientMatrix)
waveletcoefmat = wavecoefglmmap$WaveletCoefficientMatrix
C0 = C1 = C2 = C3 = C4 = C5 = 1
max_likelihood = nlminb(start = C5, objective=minus_ll, lower=0, upper=Inf, C0=C0, C1=C1, C2=C2, C3=C3, C4=C4, subs=1:n, grid=grid, waveletcoefmat=waveletcoefmat)
sourceCpp("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Project-01-fMRI/R_package/Version_2.0/BHMSMAfMRI/src/BHMSMA.cpp")
max_likelihood = nlminb(start = C5, objective=minus_ll, lower=0, upper=Inf, C0=C0, C1=C1, C2=C2, C3=C3, C4=C4, subs=1:n, grid=grid, waveletcoefmat=waveletcoefmat)
n <- 3
grid <- 8
ntime <- 4
data <- array(rnorm(n*grid*grid*ntime),
dim=c(n,grid,grid,ntime))
designmat <- cbind(c(1,1,1,1),c(1,0,1,0))
k <- 2
analysis <- "multi"
BHMSMAmulti <- BHMSMA(n, grid, data, designmat,
k, analysis)
library(BHMSMAfMRI)
n <- 3
grid <- 8
ntime <- 4
data <- array(rnorm(n*grid*grid*ntime),
dim=c(n,grid,grid,ntime))
designmat <- cbind(c(1,1,1,1),c(1,0,1,0))
k <- 2
analysis <- "multi"
BHMSMAmulti <- BHMSMA(n, grid, data, designmat,
k, analysis)
set.seed(1)
n <- 3
grid <- 8
ntime <- 10
designmat <- cbind(rep(1,10),c(rep(c(1,0),5)))
data <- array(dim=c(n,grid,grid,ntime),
rnorm(n*grid*grid*ntime))
glm.fit <- glmcoef(n,grid,data,designmat)
dim(glm.fit$GLMCoefStandardized)
library(usethis)
use_article(name="manual", title="Manual")
setwd("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Project-01-fMRI/R_package/Version_2.0/BHMSMAfMRI")
use_article(name="manual", title="Manual")
use_article(name="manual", title="Manual")
getAnywhere("is_linking_to")
use_article
getAnywhere("check_is_package")
getAnywhere("use_vignette_template")
library(rmarkdown)
use_article(name="manual", title="Manual")
getAnywhere("use_build_ignore")
check_is_package = function (whos_asking = NULL)
{
if (is_package()) {
return(invisible())
}
message <- "Project {ui_value(project_name())} is not an R package."
if (!is.null(whos_asking)) {
message <- c("{ui_code(whos_asking)} is designed to work with packages.",
message)
}
ui_stop(message)
}
check_is_package("use_article()")
source("/Users/nsanyal/Downloads/usethis/R/github-labels.R")
source("/Users/nsanyal/Downloads/usethis/R/write.R")
source("/Users/nsanyal/Downloads/usethis/R/vscode.R")
source("/Users/nsanyal/Downloads/usethis/R/vignette.R")
source("/Users/nsanyal/Downloads/usethis/R/version.R")
source("/Users/nsanyal/Downloads/usethis/R/utils.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-ui.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-roxygen.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-rematch2.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-glue.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-github.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-git.R")
source("/Users/nsanyal/Downloads/usethis/R/utils-gh.R")
source("/Users/nsanyal/Downloads/usethis/R/usethis-package.R")
source("/Users/nsanyal/Downloads/usethis/R/usethis-defunct.R")
source("/Users/nsanyal/Downloads/usethis/R/usethis-defunct.R")
source("/Users/nsanyal/Downloads/usethis/R/use_import_from.R")
source("/Users/nsanyal/Downloads/usethis/R/use_github_file.R")
source("/Users/nsanyal/Downloads/usethis/R/ui.R")
source("/Users/nsanyal/Downloads/usethis/R/tutorial.R")
source("/Users/nsanyal/Downloads/usethis/R/tidyverse.R")
source("/Users/nsanyal/Downloads/usethis/R/tidy-upkeep.R")
source("/Users/nsanyal/Downloads/usethis/R/tibble.R")
source("/Users/nsanyal/Downloads/usethis/R/test.R")
source("/Users/nsanyal/Downloads/usethis/R/template.R")
source("/Users/nsanyal/Downloads/usethis/R/spelling.R")
source("/Users/nsanyal/Downloads/usethis/R/sitrep.R")
source("/Users/nsanyal/Downloads/usethis/R/rstudio.R")
source("/Users/nsanyal/Downloads/usethis/R/rprofile.R")
source("/Users/nsanyal/Downloads/usethis/R/roxygen.R")
source("/Users/nsanyal/Downloads/usethis/R/rmarkdown.R")
source("/Users/nsanyal/Downloads/usethis/R/revdep.R")
source("/Users/nsanyal/Downloads/usethis/R/release.R")
source("/Users/nsanyal/Downloads/usethis/R/readme.R")
source("/Users/nsanyal/Downloads/usethis/R/rcpp.R")
source("/Users/nsanyal/Downloads/usethis/R/r.R")
source("/Users/nsanyal/Downloads/usethis/R/proj.R")
source("/Users/nsanyal/Downloads/usethis/R/pr.R")
source("/Users/nsanyal/Downloads/usethis/R/pkgdown.R")
source("/Users/nsanyal/Downloads/usethis/R/pipe.R")
source("/Users/nsanyal/Downloads/usethis/R/package.R")
source("/Users/nsanyal/Downloads/usethis/R/news.R")
source("/Users/nsanyal/Downloads/usethis/R/namespace.R")
source("/Users/nsanyal/Downloads/usethis/R/make.R")
source("/Users/nsanyal/Downloads/usethis/R/logo.R")
source("/Users/nsanyal/Downloads/usethis/R/line-ending.R")
source("/Users/nsanyal/Downloads/usethis/R/lifecycle.R")
source("/Users/nsanyal/Downloads/usethis/R/license.R")
source("/Users/nsanyal/Downloads/usethis/R/latest-dependencies.R")
source("/Users/nsanyal/Downloads/usethis/R/jenkins.R")
source("/Users/nsanyal/Downloads/usethis/R/issue.R")
source("/Users/nsanyal/Downloads/usethis/R/ignore.R")
source("/Users/nsanyal/Downloads/usethis/R/helpers.R")
source("/Users/nsanyal/Downloads/usethis/R/github.R")
source("/Users/nsanyal/Downloads/usethis/R/github-pages.R")
source("/Users/nsanyal/Downloads/usethis/R/github-actions.R")
source("/Users/nsanyal/Downloads/usethis/R/github_token.R")
source("/Users/nsanyal/Downloads/usethis/R/git.R")
source("/Users/nsanyal/Downloads/usethis/R/git-default-branch.R")
source("/Users/nsanyal/Downloads/usethis/R/edit.R")
source("/Users/nsanyal/Downloads/usethis/R/documentation.R")
source("/Users/nsanyal/Downloads/usethis/R/directory.R")
source("/Users/nsanyal/Downloads/usethis/R/description.R")
source("/Users/nsanyal/Downloads/usethis/R/data.R")
source("/Users/nsanyal/Downloads/usethis/R/data-table.R")
source("/Users/nsanyal/Downloads/usethis/R/create.R")
source("/Users/nsanyal/Downloads/usethis/R/cran.R")
source("/Users/nsanyal/Downloads/usethis/R/cpp11.R")
source("/Users/nsanyal/Downloads/usethis/R/coverage.R")
source("/Users/nsanyal/Downloads/usethis/R/course.R")
source("/Users/nsanyal/Downloads/usethis/R/code-of-conduct.R")
source("/Users/nsanyal/Downloads/usethis/R/citation.R")
source("/Users/nsanyal/Downloads/usethis/R/ci.R")
source("/Users/nsanyal/Downloads/usethis/R/browse.R")
source("/Users/nsanyal/Downloads/usethis/R/block.R")
source("/Users/nsanyal/Downloads/usethis/R/badge.R")
source("/Users/nsanyal/Downloads/usethis/R/addin.R")
use_article(name="manual", title="Manual")
getAnywhere("glue_collapse")
glue_collapse = function (x, sep = "", width = Inf, last = "")
{
if (length(x) == 0) {
return(as_glue(character()))
}
if (any(is.na(x))) {
return(as_glue(NA_character_))
}
if (nzchar(last) && length(x) > 1) {
res <- glue_collapse(x[seq(1, length(x) - 1)], sep = sep,
width = Inf)
return(glue_collapse(paste0(res, last, x[length(x)]),
width = width))
}
x <- paste0(x, collapse = sep)
if (width < Inf) {
x_width <- nchar(x, "width")
too_wide <- x_width > width
if (too_wide) {
x <- paste0(substr(x, 1, width - 3), "...")
}
}
as_glue(x)
}
use_article(name="manual", title="Manual")
library(glue)
use_article(name="manual", title="Manual")
getAnywhere("path_file")
library(fs)
use_article(name="manual", title="Manual")
getAnywhere()
getAnywhere("%||%")
library(cli)
library(cli)
library(clipr)
library(curl)
library(desc)
library(fs)
library(gert)
library(gh)
library(glue)
library(lifecycle)
library(rlang)
library(rprojroot)
library(withr)
library(crayon)
library(jsonlite)
library(purrr)
library(rappdirs)
library(rstudioapi)
library(stats)
library(utils)
library(whisker)
library(yaml)
use_article(name="manual", title="Manual")
use_dependency
use_dependency
getwd()
setwd(""/Users/nsanyal/Dropbox/Statistics/Research_Nil/Project-01-fMRI/R_package/Version_2.0/BHMSMAfMRI1"")
setwd("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Project-01-fMRI/R_package/Version_2.0/BHMSMAfMRI1")
ls()
dir()
build_readme()
library(devtools)
build_readme()
build_home()
library(pkgdown)
build_home()
build_readme()
build_home()
build_readme()
build_home()
getwd()
setwd("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Project-01-fMRI/R_package/Version_2.0/BHMSMAfMRI")
build_readme()
build_home()
build_readme()
build_home()
build_readme()
build_home()
build_reference()
use_article()
use_article("BHMSMAfMRI")
?build_site
build_reference()
library(Rcpp)
library(RcppArmadillo)
build_reference()
.Last.error
build_reference()
getwd()
build_reference()
